[project]
name = "aero-data"
version = "0.2.6"
description = ""
authors = [
    {name = "lsalehar", email = "lsalehar@users.noreply.github.com"}
]
requires-python = ">=3.12"
dependencies = [
    "supabase>=2.10.0",
    "python-decouple>=3.8",
    "shapely>=2.0",
    "reflex>=0.8.13",
    "cuid2>=2.0.1",
    "python-dotenv>=1.0.1",
    "reverse-geocode>=1.6.5",
    "charset-normalizer>=3.4",
    "toml>=0.10.2",
    "more-itertools>=10.7.0",
    "granian>=2.3.1",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "ipython>=8.30.0",
    "jupyter>=1.1.1",
    "geopy>=2.4.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "Q",  # flake8-quotes
    "S",  # flake8-bandit
    "T20", # flake8-print
    "PT", # flake8-pytest-style
    "RET", # flake8-return
    "A",  # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe
    "ICN", # flake8-import-conventions
    "G",  # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "ERA", # eradicate
    "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "PL", # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numpy
    "AIR", # airflow
    "PERF", # perflint
    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # ruff-specific rules
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "S101", # use of assert
    "T201", # print statements
    "COM812", # missing trailing comma
    "ISC001", # implicitly concatenated string literals
]

[tool.ruff.lint.per-file-ignores]
"aero_data.py" = ["F401"] # unused imports
"__init__.py" = ["F401"] # unused imports
"tests/**/*.py" = ["S101", "PLR2004", "T201"] # allow assert and print in tests

[tool.ruff.lint.isort]
known-first-party = ["aero_data"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[dependency-groups]
dev = [
    "mypy>=1.18.2",
    "ruff>=0.13.3",
]
